name: CI
on:
  - push
  - pull_request
permissions: {}
jobs:
  lint:
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5
        with:
          node-version: "24"
      - run: npm install --ignore-scripts
      - run: npm run lint-cpp
      - run: npm run lint-js
      - run: npm run lint-types
  build-native:
    permissions:
      contents: read
    needs: lint
    name: "build-${{ matrix.platform }} [Node.js ${{ matrix.nodejs_version_major }}] ${{ matrix.package && '[package]' }}"
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            container: rockylinux:8
            nodejs_arch: x64
            nodejs_version: "^18.17.0"
            nodejs_version_major: 18
            platform: linux-x64
            package: true
          - os: ubuntu-24.04
            container: rockylinux:8
            nodejs_arch: x64
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: linux-x64
          - os: ubuntu-24.04
            container: rockylinux:8
            nodejs_arch: x64
            nodejs_version: "^22.9.0"
            nodejs_version_major: 22
            platform: linux-x64
          - os: ubuntu-24.04
            container: node:18-alpine3.17
            nodejs_version_major: 18
            platform: linuxmusl-x64
            package: true
          - os: ubuntu-24.04
            container: node:20-alpine3.18
            nodejs_version_major: 20
            platform: linuxmusl-x64
          - os: ubuntu-24.04
            container: node:22-alpine3.20
            nodejs_version_major: 22
            platform: linuxmusl-x64
          - os: ubuntu-24.04-arm
            container: arm64v8/rockylinux:8
            nodejs_arch: arm64
            nodejs_version: "^18.17.0"
            nodejs_version_major: 18
            platform: linux-arm64
            package: true
          - os: ubuntu-24.04-arm
            container: arm64v8/rockylinux:8
            nodejs_arch: arm64
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: linux-arm64
          - os: macos-15-intel
            nodejs_arch: x64
            nodejs_version: "^18.17.0"
            nodejs_version_major: 18
            platform: darwin-x64
            package: true
          - os: macos-15-intel
            nodejs_arch: x64
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: darwin-x64
          - os: macos-15-intel
            nodejs_arch: x64
            nodejs_version: "^22.9.0"
            nodejs_version_major: 22
            platform: darwin-x64
          - os: macos-15
            nodejs_arch: arm64
            nodejs_version: "^18.17.0"
            nodejs_version_major: 18
            platform: darwin-arm64
            package: true
          - os: macos-15
            nodejs_arch: arm64
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: darwin-arm64
          - os: macos-15
            nodejs_arch: arm64
            nodejs_version: "^22.9.0"
            nodejs_version_major: 22
            platform: darwin-arm64
          - os: windows-2022
            nodejs_arch: x86
            nodejs_version: "18.18.2" # pinned to avoid 18.19.0 and npm 10
            nodejs_version_major: 18
            platform: win32-ia32
            package: true
          - os: windows-2022
            nodejs_arch: x86
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: win32-ia32
          - os: windows-2022
            nodejs_arch: x86
            nodejs_version: "^22.9.0"
            nodejs_version_major: 22
            platform: win32-ia32
          - os: windows-2022
            nodejs_arch: x64
            nodejs_version: "^18.17.0"
            nodejs_version_major: 18
            platform: win32-x64
            package: true
          - os: windows-2022
            nodejs_arch: x64
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: win32-x64
          - os: windows-2022
            nodejs_arch: x64
            nodejs_version: "^22.9.0"
            nodejs_version_major: 22
            platform: win32-x64
          - os: windows-11-arm
            nodejs_arch: arm64
            nodejs_version: "^20.3.0"
            nodejs_version_major: 20
            platform: win32-arm64
            package: true
          - os: windows-11-arm
            nodejs_arch: arm64
            nodejs_version: "^22.9.0"
            nodejs_version_major: 22
            platform: win32-arm64
    steps:
      - name: Dependencies (Rocky Linux glibc)
        if: contains(matrix.container, 'rockylinux')
        run: |
          dnf install -y gcc-toolset-14-gcc-c++ make git python3.12 fontconfig google-noto-sans-fonts
          echo "/opt/rh/gcc-toolset-14/root/usr/bin" >> $GITHUB_PATH
      - name: Dependencies (Linux musl)
        if: contains(matrix.container, 'alpine')
        run: apk add build-base git python3 font-noto --update-cache
      - name: Dependencies (Python 3.11 - macOS, Windows)
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'windows')
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Dependencies (Node.js)
        if: "!contains(matrix.platform, 'linuxmusl')"
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.nodejs_version }}
          architecture: ${{ matrix.nodejs_arch }}
      - uses: actions/checkout@v4
      - run: npm install
      - run: npm run build
      - if: matrix.package && contains(matrix.os, 'windows')
        run: Get-ChildItem -path node_modules/@img/sharp-libvips-dev/cplusplus/ -Recurse
      - run: npm run test-unit
        #continue-on-error: true
      - if: matrix.package
        run: npm run package-from-local-build
      - uses: actions/upload-artifact@v4
        if: matrix.package
        with:
          name: ${{ matrix.platform }}
          path: |
            npm/${{ matrix.platform }}
            src/build
            coverage
          retention-days: 1
          if-no-files-found: error
  build-msys2:
    permissions:
     contents: read
    strategy:
      matrix:
        sys: [UCRT64]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          release: false
          location: C:\
          install: >-
            base-devel binutils
          pacboy: >-
            rustup:p
            nodejs:p
            yarn:p
            python3.12:p
            toolchain:p
      - name: Install
        run: |
          #sed -i '/prefix/d' /c/npm/prefix/etc/npmrc
          #cat ~/.npmrc
          pyver=$(python --version | sed -r -n 's/.*(([0-9]{1,2})\.([0-9]{1,2}))\.[0-9]{1,2}.*/\1/p')
          sed -i 's|^\(import os\)|import platform\n\1|;s|\( *\)\(args = \x27{} \)/c\( "{}"\x27.format (comspec,\)\( args)$\)|\1if \x27cmd.exe\x27 in comspec:\n\1  shellSw = \x27/c\x27\n\1else:\n\1  shellSw = \x27-c\x27\n\1  args = args.replace(\x27"\x27, \x27\x5c\x5c"\x27)\n\1\2{}\3 shellSw,\4|' $MINGW_PREFIX/lib/python${pyver}/subprocess.py
          echo $npm_config_prefix
          export npm_config_prefix=$MINGW_PREFIX
          npm config set prefix $MINGW_PREFIX
          echo '' > /c/npm/prefix/etc/npmrc
          npm config ls -l
          mv /c/npm{,.bak}
          old=$(pwd)
          cd /ucrt64/lib/node_modules/npm/node_modules/
          [ -d ./node-gyp ] && cd ./node-gyp && ls -l
          cp $old/input.py gyp/pylib/gyp
          cp $old/make.py gyp/pylib/gyp/generator
          which npm
          npm link --force
          #export MSYS="winsymlinks:lnk"
          #ln -s /ucrt64/lib/node_modules/npm/node-gyp /ucrt64/lib/node_modules/node-gyp
          cd /ucrt64/lib/node_modules
          ls -l
          cd $old
          which cargo
          which node && node -p "process.report.getReport().header.osName"
          which rustup && rustup default
          rustup set default-host x86_64-pc-windows-gnu
          rustup install stable-x86_64-pc-windows-gnu
          # rustVersion=$(sed -n 's/channel *= *"\(.*\)"/\1/p' rust-toolchain.toml)
          # rustup install "$rustVersion"
          rustup default stable-x86_64-pc-windows-gnu
          rustup override set stable-x86_64-pc-windows-gnu
          rustup show
          rustup target add x86_64-pc-windows-gnu
          which npm && which corepack
          python ./checkPer.py
          # corepack enable pnpm
          # npm install -g pnpm
          # npm install -g pnpm@latest-10
          # echo $?
      - name: Build
        continue-on-error: true
        run: |
          # npm install -g corepack
          # corepack enable
          # export JAVA_HOME="/C/Program Files/OpenJDK/jdk-21"
          # export PATH="$JAVA_HOME/bin:$PATH"
          # java -version
          export npm_config_prefix=$MINGW_PREFIX
          which npm && which python && python --version
          which node-gyp
          [ -d /c/hostedtoolcache/windows/Python ] && mv /c/hostedtoolcache/windows/Python{,.bak}
          # sed -i 's|\(@napi-rs/cli": *\).*,$|\1"https://github.com/lsq/napi-rs/releases/download/%40napi-rs%2Fcli%403.2.0/napi-rs-cli-3.2.0.tgz",|' package.json
          # sed -i 's|\(@napi-rs/wasm-runtime": *"\).*"|\1https://github.com/lsq/napi-rs/releases/download/%40napi-rs%2Fwasm-runtime%401.0.5/napi-rs-wasm-runtime-1.0.5.tgz"|' package.json
          sed -i '/node-gyp/d' package.json
          sed -i 's/install":/built":/' package.json
          # sed -i '/gyp =/d' install/check.js
          # sed -i 's/gyp()/d' install/check.js
          mkdir node_modules
          npm install
          npm link node-gyp --force
          ls -l node_modules
          #cp -rf $MINGW_PREFIX/lib/node_modules/npm/node_modules/node-gyp node_modules/
          # ls node_modules
          cd src
          node -p "require('../lib/libvips').minimumLibvipsVersion"
          node -p "require('../lib/libvips').buildSharpLibvipsCPlusPlusDir()"
          cd ..
          npm run built
          npm run build
          ls -R ./src/build/
          ls -R npm/
          # sed -i '/^  describe(\x27Windows platform/,/^  });/{s|^|//|}' test/unit/libvips.js
          npm run test-unit
          npm run package-from-local-build
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: win32-x64-gnu
          path: |
            npm/win32-x64-gnu
            src/build
            coverage
          if-no-files-found: error


  build-linuxmusl-arm64:
    permissions:
      contents: read
    needs: lint
    name: "build-linuxmusl-arm64 [Node.js ${{ matrix.nodejs_version_major }}] ${{ matrix.package && '[package]' }}"
    runs-on: ubuntu-24.04-arm
    container:
      image: ${{ matrix.container }}
      volumes:
        - /opt:/opt:rw,rshared
        - /opt:/__e/node20:ro,rshared
    strategy:
      fail-fast: false
      matrix:
        include:
        - container: node:18-alpine3.17
          nodejs_version_major: 18
          package: true
        - container: node:20-alpine3.18
          nodejs_version_major: 20
    steps:
      - name: Allow Linux musl containers on ARM64 runners # https://github.com/actions/runner/issues/801#issuecomment-2394425757
        shell: sh
        run: |
          sed -i "/^ID=/s/alpine/NotpineForGHA/" /etc/os-release
          apk add nodejs --update-cache
          mkdir /opt/bin
          ln -s /usr/bin/node /opt/bin/node
      - name: Dependencies
        run: apk add build-base git python3 font-noto --update-cache
      - uses: actions/checkout@v4
      - run: npm install
      - run: npm run build
      - run: npm run test-unit
      - if: matrix.package
        run: npm run package-from-local-build
      - uses: actions/upload-artifact@v4
        if: matrix.package
        with:
          name: linuxmusl-arm64
          path: npm/linuxmusl-arm64
          retention-days: 1
          if-no-files-found: error
  build-qemu:
    permissions:
      contents: read
    needs: lint
    name: "build-${{ matrix.platform }} [Node.js ${{ matrix.nodejs_version_major }}] [package]"
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-arm
            base_image: "balenalib/rpi-raspbian:bullseye"
            nodejs_arch: armv6l
            nodejs_hostname: unofficial-builds.nodejs.org
            nodejs_version: "18.17.0"
            nodejs_version_major: 18
          - platform: linux-s390x
            base_image: "--platform=linux/s390x s390x/debian:bookworm"
            nodejs_arch: s390x
            nodejs_hostname: nodejs.org
            nodejs_version: "18.17.0"
            nodejs_version_major: 18
          - platform: linux-ppc64
            base_image: "--platform=linux/ppc64le ppc64le/debian:bookworm"
            nodejs_arch: ppc64le
            nodejs_hostname: nodejs.org
            nodejs_version: "18.17.0"
            nodejs_version_major: 18
          - platform: linux-riscv64
            base_image: "--platform=linux/riscv64 riscv64/debian:trixie"
            compiler_flags: "-march=rv64gc"
            nodejs_arch: riscv64
            nodejs_hostname: unofficial-builds.nodejs.org
            nodejs_version: "20.19.5"
            nodejs_version_major: 20
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v3
        with:
          arch: none
          distro: none
          base_image: ${{ matrix.base_image }}
          env: |
            CFLAGS: "${{ matrix.compiler_flags }}"
            CXXFLAGS: "${{ matrix.compiler_flags }}"
          run: |
            apt-get update
            apt-get install -y curl g++ git libatomic1 make python3 xz-utils
            mkdir /opt/nodejs
            curl --silent https://${{ matrix.nodejs_hostname }}/download/release/v${{ matrix.nodejs_version}}/node-v${{ matrix.nodejs_version}}-linux-${{ matrix.nodejs_arch }}.tar.xz | tar xJC /opt/nodejs --strip-components=1
            export PATH=$PATH:/opt/nodejs/bin
            npm install
            npm run build
            node --test test/unit/io.js
            npm run package-from-local-build
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: npm/${{ matrix.platform }}
          retention-days: 1
          if-no-files-found: error
  build-emscripten:
    permissions:
      contents: read
    needs: lint
    name: "build-wasm32 [package]"
    runs-on: ubuntu-24.04
    container: "emscripten/emsdk:4.0.14"
    steps:
      - uses: actions/checkout@v4
      - name: Dependencies
        run: apt-get update && apt-get install -y pkg-config
      - name: Dependencies (Node.js)
        uses: actions/setup-node@v5
        with:
          node-version: "20"
      - run: npm install
      - run: emmake npm run build
      - name: Verify emscripten versions match
        run: |
          EMSCRIPTEN_VERSION_LIBVIPS=$(node -p "require('@img/sharp-libvips-dev-wasm32/versions').emscripten")
          EMSCRIPTEN_VERSION_SHARP=$(emcc -dumpversion)
          echo "libvips built with emscripten $EMSCRIPTEN_VERSION_LIBVIPS"
          echo "sharp built with emscripten $EMSCRIPTEN_VERSION_SHARP"
          test "$EMSCRIPTEN_VERSION_LIBVIPS" = "$EMSCRIPTEN_VERSION_SHARP"
      - run: emmake npm run test-unit
      - run: emmake npm run package-from-local-build
      - uses: actions/upload-artifact@v4
        with:
          name: wasm32
          path: npm/wasm32
          retention-days: 1
          if-no-files-found: error
  release:
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-24.04
    needs:
      - build-native
      - build-linuxmusl-arm64
      - build-qemu
      - build-emscripten
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          nver=$(sed -n '4s/.*"version": *"\([^"]*\)".*/\1/p' package.json)
          echo nver=$nver | tee -a $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          path: npm
      - name: Create npm workspace tarball
        run: |
          tar -vcaf npm-workspace.tar.xz --directory npm --exclude=from-local-build.js .
          echo '----------------------------'
          cd npm && npm publish --workspaces --dry-run && echo '---------------------------------' && cd -
          # while read -r pn;do p="${pn%$'\r'}" echo -e "-----------\nPack ${p}";cd npm/"${p}";npm pack; ls; cp -rf *.tgz ../;cd -;done < <(jq -r '.workspaces.[]' npm/package.json)
          while read -r pn;do p="${pn%$'\r'}"; echo -e "-----------\nPack ${p}";cd npm/"${p}";npm pack; ls; cp -rf *.tgz ../;cd -;done < <(jq -r '.workspaces.[]' npm/package.json)
          echo '----------------'
          pwd && ls && echo '---------------' && npm pack && ls
      - uses: actions/setup-node@v5
        with:
          node-version: '24'
      - name: Create release notes
        run: npm run package-release-notes
      - name: Create GitHub release for tag
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: npm-workspace.tar.xz
          artifactContentType: application/x-xz
          prerelease: ${{ contains(github.ref, '-rc') }}
          makeLatest: ${{ !contains(github.ref, '-rc') }}
          bodyFile: release-notes.md
      - name: Publish platform-specific npm packages
        if: startsWith(github.ref, 'refs/tags/v')
        run: cd npm && npm publish --workspaces --tag=${{ contains(github.ref, '-rc') && 'next' || 'latest' }}
      - name: Publish sharp npm package
        if: startsWith(github.ref, 'refs/tags/v')
        run: npm publish --tag=${{ contains(github.ref, '-rc') && 'next' || 'latest' }}
      - name: Upload to Release (@img/sharp)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sharp-*.tgz
          name: '@img/sharp@${{ env.nver }}'
          tag_name: '@img/sharp@${{ env.nver }}'
          fail_on_unmatched_files: true
          # body_path: gitlog.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
